#=======================================================================
#               STARTUP TIMES
#=======================================================================
zmodload zsh/zprof
start_time="$(date +%s)"

#=======================================================================
#               SOURCE ZPLUG
#=======================================================================
# Check if zplug is installed
if [[ ! -d ~/.zplug ]]; then
  git clone https://github.com/zplug/zplug ~/.zplug
  source ~/.zplug/init.zsh && zplug update --self
fi
source ~/.zplug/init.zsh


#=======================================================================
#       ENV VARIABLES
#=======================================================================
export NVM_LAZY_LOAD=true
# export NVM_AUTO_USE=true
# NB for future notice this tries to install in dotfiles unless explicitly
# specified here
export NVM_DIR="$HOME/.nvm"


# ZSH_TMUX_AUTOSTART="true"
ZSH_TMUX_FIXTERM_WITH_256COLOR=false


export DOTFILES=$HOME/Dotfiles
export RUNCOM=$DOTFILES/runcom/

export PATH="$PATH:`yarn global bin`"


# If you come from bash you might have to change your $PATH.
export PATH=$HOME/.node/bin:$HOME/.rbenv/shims:$PATH
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# this line puts Python in the PATH
export PATH=$HOME/Library/Python/2.7/bin:$PATH


export ZPLUG_LOADFILE=$DOTFILES/zplug/packages.zsh

DEFAULT_USER=$USER

export MANPATH="/usr/local/man:$MANPATH"
export PATH=~/.rbenv:$PATH
# you may need to manually set your language environment
export LANG=en_us.utf-8

# preferred editor for local and remote sessions
if [[ -n $SSH_CONNECTION ]]; then
  export EDITOR='vim'
else
  export EDITOR='vim'
fi

export USE_EDITOR=$EDITOR
export VISUAL=$EDITOR

# compilation flags
# export archflags="-arch x86_64"

# ssh
export SSH_KEY_PATH="~/.ssh/rsa_id"

# Change the path where project plugin creates projects
export PROJECTS_HOME=~/Desktop/Coding
# Aliases 'hub' to git to allow for greater git powah!!
eval "$(hub alias -s)"



#=======================================================================
#                 SPACESHIP THEME
#=======================================================================

# PROMPT
# ➔ - default arrow
# ➼ - fun alternative
# ➪ - fun alternative2
SPACESHIP_PROMPT_SYMBOL='➜ 🍕 👾 '
SPACESHIP_PROMPT_ADD_NEWLINE=true

# TIME
# SPACESHIP_TIME_SHOW=true
# SPACESHIP_TIME_12HR=true

# VI_MODE
SPACESHIP_VI_MODE_SHOW=true
SPACESHIP_VI_MODE_INSERT="[i]"
# "[Insert]"
SPACESHIP_VI_MODE_NORMAL="[n]"
# "[Normal]"
# GIT
SPACESHIP_PREFIX_GIT='  on '
SPACESHIP_GIT_STASHED=' 💰 '
SPACESHIP_GIT_UNTRACKED=' 😰 '


SPACESHIP_PREFIX_NVM=' @ '
SPACESHIP_RUBY_SHOW=false
# PYENV
SPACESHIP_PYENV_SHOW=true
SPACESHIP_PYENV_SYMBOL='🐍'


#=======================================================================
# GEOMETRY SETTINGS
#=======================================================================
PROMPT_GEOMETRY_COLORIZE_SYMBOL=true
GEOMETRY_SYMBOL_PROMPT="▲"
GEOMETRY_PROMPT_SUFFIX="\n ➜  🍕 👾  "
GEOMETRY_PROMPT_PLUGIN==(virtualenv node git exec_time)

#=======================================================================
# User configuration
#=======================================================================

add-zsh-hook precmd _z_precmd
function _z_precmd {
  _z --add "$PWD"
}
#=======================================================================
#                  ZPLUG
#=======================================================================
# Make sure to use double quotes
zplug "plugins/pip", from:oh-my-zsh
zplug "plugins/git", from:oh-my-zsh
zplug "plugins/heroku", from:oh-my-zsh
zplug "plugins/command-not-found", from:oh-my-zsh
zplug "lukechilds/zsh-better-npm-completion"
zplug "plugins/tmux", from:oh-my-zsh
zplug "plugins/colored-man-pages", from:oh-my-zsh
zplug "plugins/osx", from:oh-my-zsh
zplug "plugins/web-search", from:oh-my-zsh
zplug "plugins/common-aliases", from:oh-my-zsh
zplug "plugins/brew", from:oh-my-zsh
zplug "plugins/pyenv", from:oh-my-zsh, lazy:true
zplug "plugins/python", from:oh-my-zsh
zplug "plugins/osx", from:oh-my-zsh
zplug "b4b4r07/enhancd", use:init.sh
zplug "zsh-users/zsh-completions"
zplug "zsh-users/zsh-autosuggestions"
zplug "zsh-users/zsh-history-substring-search"
zplug "lukechilds/zsh-nvm", lazy:true
zplug "k4rthik/git-cal"
zplug "djui/alias-tips"
zplug "rupa/z", use:z.sh
zplug "knu/z", use:zsh, defer:3
zplug "gko/project", use:project.sh
zplug "supercrabtree/k"
zplug "urbainvaes/fzf-marks"
zplug "b4b4r07/emoji-cli"


# Set the priority when loading
# e.g., zsh-syntax-highlighting must be loaded
# after executing compinit command and sourcing other plugins
# (If the defer tag is given 2 or above, run after compinit command)
zplug "zsh-users/zsh-syntax-highlighting", defer:3
# Group dependencies
# Load "emoji-cli" if "jq" is installed in this example
# zplug "stedolan/jq", \
  #     from:gh-r, \
  #     as:command, \
  #     rename-to:jq
# zplug "b4b4r07/emoji-cli", \
  #     on:"stedolan/jq"


# zplug "modules/prompt", from:prezto
# zplug "chauncey-garrett/zsh-prompt-garrett", from:prezto, as:theme
# zplug "arialdomartini/oh-my-git", use:"*sh"

# Load theme file
# zplug "skuridin/oh-my-zsh-node-theme", as:theme, from:github
# zplug mafredri/zsh-async, from:github
# zplug "sindresorhus/pure", use:pure.zsh, from:github, as:theme
zplug "denysdovhan/spaceship-zsh-theme", as:theme




# Grab binaries from GitHub Releases
# and rename with the "rename-to:" tag
zplug "junegunn/fzf-bin", \
  from:gh-r, \
  as:command, \
  rename-to:fzf, \
  use:"*darwin*amd64*"


# Add all .sh files to the $PATH and make them executable
# zplug "b4b4r07/hello_bitbucket", \
  #     from:bitbucket, \
  #     as:command, \
  #     use:"*.sh"

# THEME
# zplug "frmendes/geometry"


zplug 'zplug/zplug', hook-build:'zplug --self-manage'


# Install plugins if there are plugins that have not been installed
if ! zplug check --verbose; then
  printf "Install? [y/N]: "
  if read -q; then
    echo; zplug install
  fi
fi

# source plugins and add commands to the PATH
zplug load


# zplug check returns true if the given repository exists
if zplug check b4b4r07/enhancd; then
  # setting if enhancd is available
  export ENHANCD_FILTER=fzf-tmux
fi


#=======================================================================
#               VI-MODE
#=======================================================================
# precmd() {
#   RPROMPT=""
# }
# zle-keymap-select() {
#   RPROMPT=""
#   [[ $KEYMAP = vicmd ]] && RPROMPT="(CMD)"
#   () { return $__prompt_status }
#   zle reset-prompt
# }
# zle-line-init() {
#   typeset -g __prompt_status="$?"
# }
# zle -N zle-keymap-select
# zle -N zle-line-init

# source ~/Dotfiles/bin/vim_mode.zsh
# Default vi mode - not compatible with vi mode zsh plugin
bindkey -v
# Binds vim mode terminal esc command to jk
bindkey -M viins ‘jk’ vi-cmd-mode
export KEYTIMEOUT=1

bindkey ‘^R’ history-incremental-search-backward

function zle-line-init zle-keymap-select {
    VIM_PROMPT="%{$fg_bold[yellow]%} [% NORMAL]%  %{$reset_color%}"
    RPS1="${${KEYMAP/vicmd/$VIM_PROMPT}/(main|viins)/}$EPS1"
    zle reset-prompt
}

zle -N zle-line-init
zle -N zle-keymap-select
# #Use vim cli mode (C-P and C-N to navigate history)
bindkey '^P' up-history
bindkey '^N' down-history
bindkey '^ ' autosuggest-accept


#======================================================================
# NATIVE SETTINGS
#======================================================================
# persistent reshahing i.e puts new executables in the $path
zstyle ':completion:*' rehash true
zstyle ':completion:*' menu select


# if no command is set typing in a line will cd by default
setopt AUTO_CD
setopt CORRECT
setopt RM_STAR_WAIT

# set some history options
setopt append_history
setopt extended_history
setopt hist_expire_dups_first
setopt hist_ignore_all_dups
setopt hist_ignore_dups
setopt hist_ignore_space
setopt hist_reduce_blanks
setopt hist_save_no_dups
setopt hist_verify

# Share your history across all your terminal windows
setopt share_history
# Keep a ton of history.
HISTSIZE=100000
SAVEHIST=100000
HISTFILE=~/.zsh_history
# POWERLINE ==========================================================
if [[ -r ~/.local/lib/python2.7/site-packages/powerline/bindings/zsh/powerline.zsh ]]; then
  source ~/.local/lib/python2.7/site-packages/powerline/bindings/zsh/powerline.zsh
fi
# BASE16===============================================================
# default code for base16 shell
base16_shell=$home/.config/base16-shell/
[ -n "$ps1" ] && [ -s $base16_shell/profile_helper.sh ] && eval "$($base16_shell/profile_helper.sh)"


#=======================================================================
#   LOCAL SCRIPTS
#=======================================================================
# source all zsh and sh files inside dotfile/runcom
source $DOTFILES/runcom/functions.sh
source $DOTFILES/runcom/zsh/alias.zsh
for fzfscript ($DOTFILES/runcom/fzf/*.sh) source $fzfscript
  for script ($DOTFILES/runcom/zsh/*) source $script


    #=======================================================================
    #       FUNCTIONS
    #=======================================================================

    # Setup global bookmarks cdg function
    # ====================================
    # Need to find a way to export this to my cdg function
    unalias cdg 2> /dev/null
    cdg() {
      local dest_dir=$(cdscuts_glob_echo | fzf )
      if [[ $dest_dir != '' ]]; then
        cd "$dest_dir"
      fi
    }
    # export -f cdg > /dev/null
    # Automatically list directory contents on `cd`. slow things down
    # unnecessarily
    auto-ls () { ls -GC; }
    chpwd_functions=( auto-ls $chpwd_functions )


    # iTERM Integration ==================================================
    test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

    # STARTUP TIMES (CONTD)================================================
    end_time="$(date +%s)"
    # Compares start time defined above with end time above and prints the
    # difference
    echo load time: $((end_time - start_time)) seconds
    # zprof

